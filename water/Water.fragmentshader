#version 330 core

// Interpolated values from the vertex shaders
//in vec3 fragmentColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 clipSpace;
in vec2 UV;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D ReflectionSampler;
uniform sampler2D RefractionSampler;
uniform sampler2D DuDvSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform float MoveFactor;
const float waveStrength = 0.01;

void main()
{
	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 50.0f;
	
	// Projective Division
	vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	vec2 RefractTexCoords = vec2(ndc.x,ndc.y);
	vec2 ReflectTexCoords = vec2(ndc.x,ndc.y);

	vec2 distortedTexCoords = texture(DuDvSampler,vec2(UV.x+MoveFactor,UV.y)).rg * 0.1;
	distortedTexCoords = UV + vec2(distortedTexCoords.x,distortedTexCoords.y+MoveFactor);
	vec2 totaldistortion = (texture(DuDvSampler,distortedTexCoords).rg * 2.0 - 1.0) * waveStrength;

	ReflectTexCoords += totaldistortion;
	RefractTexCoords += totaldistortion;


	vec3 ReflectionColor = texture( ReflectionSampler, ReflectTexCoords ).rgb;
	vec3 RefractionColor = texture( RefractionSampler, RefractTexCoords ).rgb;
	
	vec3 viewVector = - normalize(EyeDirection_cameraspace);
	float refractiveFactor = clamp(dot(viewVector,vec3(0.0,1.0,0.0)),0.0,1.0);
	refractiveFactor = pow(refractiveFactor,0.1);

	vec3 MaterialDiffuseColor = mix(ReflectionColor,RefractionColor,0.5);
	//Add Bluish Color
	MaterialDiffuseColor = mix(MaterialDiffuseColor,vec3(0.0,0.3,0.5),0.2);
	//vec3 MaterialDiffuseColor = texture(DuDvSampler,UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	color =
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
}